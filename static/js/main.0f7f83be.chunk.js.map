{"version":3,"sources":["calc/components/Button.js","calc/components/Display.js","calc/components/Equals.js","calc/components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","className","concat","val","children","isNaN","onClick","onItemClick","Display","type","readOnly","placeholder","value","Equals","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleButtonClick","state","newInput","setState","inputValue","prevState","handleOperatorClick","operatorUsed","operator","subtotal","parseFloat","runFunction","handleEqualClick","handleClear","newOperator","_this2","components_Display","components_Button","components_Equals","Component","App","components_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f7f83be.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Button.css'; \n\nconst isOperator = val => {\n    return !isNaN(val);\n};\n\nconst Button = props => (\n    <span className=\"calc__key-wrapper\">\n        <button className={`${isOperator(props.children) ? 'calc__key' : 'calc__key calc__key--operator'}`} onClick={() => props.onItemClick(props.children)}>\n            {props.children}\n        </button>\n    </span>\n);\n\nexport default Button","import React from 'react';\nimport '../styles/Display.css';\n\nconst Display = props => (\n    <input type=\"text\" className=\"calc__display\" readOnly placeholder=\"0\" value={props.value} />\n);\n\nexport default Display","import React from 'react';\nimport '../styles/Equals.css';\n\nconst Equals = props => (\n    <span className=\"calc__key-wrapper calc__key-wrapper--equals\">\n        <button className=\"calc__key calc__key--equals\" onClick={() => props.onItemClick(props.children)}>\n            {props.children}\n        </button>\n    </span>\n);\n\nexport default Equals","import React, { Component } from 'react';\nimport '../styles/Calculator.css';\nimport Button from './Button';\nimport Display from './Display';\nimport Equals from './Equals';\n\nclass Calculator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputValue: 0,\n            subtotal: 0,\n            operator: '',\n            newInput: true,\n            operatorUsed: false,\n        };\n       \n    }\n\n    runFunction(operator, newOperator) {\n        if ( operator === '+' ){\n            this.setState((prevState) => ({\n                subtotal: prevState.subtotal += parseFloat(this.state.inputValue)\n            })); \n        } else if ( operator === '-' ) {\n            this.setState((prevState) => ({\n                subtotal: prevState.subtotal -= parseFloat(this.state.inputValue)\n            })); \n        } else if ( operator === '×' ) {\n            this.setState((prevState) => ({\n                subtotal: prevState.subtotal *= parseFloat(this.state.inputValue)\n            })); \n        } else if ( operator === '÷' ) {\n            this.setState((prevState) => ({\n                subtotal: prevState.subtotal /= parseFloat(this.state.inputValue)\n            })); \n        }\n        this.setState((prevState) => ({\n            inputValue: prevState.subtotal,\n            operator: newOperator\n        }));\n    }\n\n    handleButtonClick = val => {\n        if ( this.state.newInput === true ){\n            if ( val === '.' ) {\n                val = `0${val}`;\n            } \n            this.setState({\n                inputValue: val,\n                newInput: false\n            });\n        } else {\n            this.setState((prevState) => ({\n                inputValue: prevState.inputValue + val,\n            })); \n        } \n    };\n\n    handleOperatorClick = val => {\n        if ( this.state.operatorUsed === false ){\n            this.setState((prevState) => ({\n                operator: val,\n                operatorUsed: true,\n                subtotal: prevState.subtotal += parseFloat(this.state.inputValue)\n            }));\n        } else {\n            this.runFunction(this.state.operator, val);\n        }\n        this.setState({\n            newInput: true\n        })\n    }\n\n    handleEqualClick = () => {\n        this.runFunction(this.state.operator);\n    }\n\n    handleClear = () => {\n        this.setState({\n            inputValue: 0,\n            subtotal: 0,\n            operator: '',\n            newInput: true,\n            operatorUsed: false,\n        });\n       \n    }\n\n    render() {\n        return ( \n            <div className=\"calc\">\n                <Display value={this.state.inputValue} />\n                <div className=\"calc__buttons\">\n                    <div className=\"calc__numbers\">\n                        <Button onItemClick={this.handleButtonClick}>1</Button>\n                        <Button onItemClick={this.handleButtonClick}>2</Button>\n                        <Button onItemClick={this.handleButtonClick}>3</Button>\n                        <Button onItemClick={this.handleButtonClick}>4</Button>\n                        <Button onItemClick={this.handleButtonClick}>5</Button>\n                        <Button onItemClick={this.handleButtonClick}>6</Button>\n                        <Button onItemClick={this.handleButtonClick}>7</Button>\n                        <Button onItemClick={this.handleButtonClick}>8</Button>\n                        <Button onItemClick={this.handleButtonClick}>9</Button>\n                        <Button onItemClick={this.handleButtonClick}>.</Button>\n                        <Button onItemClick={this.handleButtonClick}>0</Button>\n                        <Button onItemClick={this.handleClear}>C</Button>\n                    </div>\n                    <div className=\"calc__operators\">\n                        <Button onItemClick={this.handleOperatorClick}>÷</Button>\n                        <Button onItemClick={this.handleOperatorClick}>×</Button>\n                        <Button onItemClick={this.handleOperatorClick}>-</Button>\n                        <Button onItemClick={this.handleOperatorClick}>+</Button>\n                        <Equals onItemClick={this.handleEqualClick}>=</Equals>\n                    </div>\n                </div>   \n            </div>\n        );\n    }\n}\n\nexport default Calculator;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Calculator from './calc/components/Calculator';\n\nclass App extends Component {\n  render() {\n    return (\n      <Calculator />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}